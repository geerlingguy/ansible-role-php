---
sudo: required

env:
  # Only test source install on latest supported OSes.
  #- distribution: centos
  #  version: 7
  #  init: /usr/lib/systemd/systemd
  #  run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  #  SITE: source
  #  PHP_VERSION: 7.0.3
  #- distribution: ubuntu
  #  version: 14.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: source
  #  PHP_VERSION: 7.0.3

  # Test package install on all supported OSes.
  #- distribution: centos
  #  version: 6
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: package
  #  PHP_VERSION: 5.6
  #- distribution: centos
  #  version: 7
  #  init: /usr/lib/systemd/systemd
  #  run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  #  SITE: package
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 14.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: package
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 12.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: package
  #  PHP_VERSION: 5.6

  # Only test source install on latest supported OSes.
  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    SITE: source-apache-fpm
    PHP_VERSION: 7.0.3
  - distribution: ubuntu
    version: 14.04
    init: /sbin/init
    run_opts: ""
    SITE: source-apache-fpm
    PHP_VERSION: 7.0.3

  # Test without any webserver
  #- distribution: centos
  #  version: 6
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: no-webserver
  #  PHP_VERSION: 5.6
  #- distribution: centos
  #  version: 7
  #  init: /usr/lib/systemd/systemd
  #  run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  #  SITE: no-webserver
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 14.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: no-webserver
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 12.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: no-webserver
  #  PHP_VERSION: 5.6

  ## Test Apache with FPM
  #- distribution: centos
  #  version: 6
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: apache-fpm
  #  PHP_VERSION: 5.6
  #- distribution: centos
  #  version: 7
  #  init: /usr/lib/systemd/systemd
  #  run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  #  SITE: apache-fpm
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 14.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: apache-fpm
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 12.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: apache-fpm
  #  PHP_VERSION: 5.6

  ## Test Nginx with FPM
  #- distribution: centos
  #  version: 6
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: nginx-fpm
  #  PHP_VERSION: 5.6
  #- distribution: centos
  #  version: 7
  #  init: /usr/lib/systemd/systemd
  #  run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  #  SITE: nginx-fpm
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 14.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: nginx-fpm
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 12.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: nginx-fpm
  #  PHP_VERSION: 5.6

  ## Test Apache with mod_php
  #- distribution: centos
  #  version: 6
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: apache-mod_php
  #  PHP_VERSION: 5.6
  #- distribution: centos
  #  version: 7
  #  init: /usr/lib/systemd/systemd
  #  run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  #  SITE: apache-mod_php
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 14.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: apache-mod_php
  #  PHP_VERSION: 5.6
  #- distribution: ubuntu
  #  version: 12.04
  #  init: /sbin/init
  #  run_opts: ""
  #  SITE: apache-mod_php
  #  PHP_VERSION: 5.6

services:
  - docker

before_install:
  # - sudo apt-get update
  # Pull container
  - 'sudo docker pull ${distribution}:${version}'
  # Customize container
  - 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'

script:
  - container_id=$(mktemp)
  # Run container in detached state
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'

  # Setup test
  - 'sudo docker exec "$(cat ${container_id})" hostname test.dev'
  - 'sudo docker exec "$(cat ${container_id})" mkdir -p /var/www/test'
  - sudo docker exec "$(cat ${container_id})" bash -c 'echo "<?php phpinfo(); ?>" >| /var/www/test/index.php'

  # Install dependencies.
  - 'sudo docker exec "$(cat ${container_id})" ansible-galaxy install -r /etc/ansible/roles/role_under_test/tests/requirements.yml'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test-${SITE}.yml --syntax-check'

  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test-${SITE}.yml'

  # Test (the clue version needs to be tested manually).
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm php -i | grep 'memory_limit.*191' || true
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm curl --header Host:test.dev localhost | grep 'memory_limit.*191M'

  # Debug
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm service php5-fpm status'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ls -l /var/log'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/php5-fpm/err.log || true'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/apache2/error.log || true'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/httpd/error_log || true'
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/nginx/error.log || true'
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm php -i | grep 'memory_limit' || true
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm curl --header Host:test.dev localhost

  # Ensure PHP configurations have taken effect.
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm php -i | grep 'memory_limit.*192'

  # Ensure PHP configurations have taken effect.
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm php -i | grep 'memory_limit.*192'

  # Clean up
  - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
